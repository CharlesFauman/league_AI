library(readr)
train_data_r <- read_csv("C:/Users/faumac/Desktop/league AI/data/train_data_r.csv")
View(train_data_r)
View(train_data_r)
train_data <- read.csv("C:/Users/faumac/Desktop/league AI/data/train_data_r.csv")
View(train_data)
?read.csv
train_data <- read.csv("C:/Users/faumac/Desktop/league AI/data/train_data_r.csv", header = TRUE, row.names = 1)
annie = train_data["Annie"]
annie[annie != 0]
sum(annie[annie != 0])
count(annie[annie > 0])
length(annie[annie > 0])
length(annie[annie < 0])
percentage_win_by_champ <- function(champ_name){
champ_data = train_data[champ_name]
wins = length(champ_data[champ_data > 0])
losses = length(champ_data[champ_data < 0])
return(wins/(wins + losses))
}
percentage_win_by_champ("Annie")
percentage_win_by_champ("Jax")
percentage_win_by_champ("Volibear")
View(train_data)
percentage_win_by_champ("KhaZix")
percentage_win_by_champ("Khazix")
percentage_win_by_champ("Nidalee")
colnames(train_data)
all_champs <- colnames(train_data)
?lapply
all_champs <- colnames(train_data)
lapply(all_champs, percentage_win_by_champ)
all_champs <- colnames(train_data)
percentage_wins <- lapply(all_champs, percentage_win_by_champ)
percentage_wins
all_champs <- colnames(train_data)
percentage_wins <- apply(all_champs, percentage_win_by_champ)
?apply
all_champs <- colnames(train_data)
percentage_wins <- sapply(all_champs, percentage_win_by_champ)
percentage_wins
?order
?sort
all_champs <- colnames(train_data)
percentage_wins <- sapply(all_champs, percentage_win_by_champ)
sort(percentage_wins, decreasing = TRUE)
all_champs <- colnames(train_data)
percentage_wins <- sapply(all_champs, percentage_win_by_champ)
percentage_wins <- sort(percentage_wins, decreasing = TRUE)
percentage_wins
champ_data = train_data["Amumu"]
champ_data
champ_data = champ_data[champ_data != 0]
champ_data
type(train_data)
class(train_data)
train_data <- as.matrix(read.csv("C:/Users/faumac/Desktop/league AI/data/train_data_r.csv", header = TRUE, row.names = 1))
percentage_win_by_champ <- function(champ_name){
champ_data = train_data[champ_name]
wins = length(champ_data[champ_data > 0])
losses = length(champ_data[champ_data < 0])
return(wins/(wins + losses))
}
all_champs <- colnames(train_data)
percentage_wins <- sapply(all_champs, percentage_win_by_champ)
percentage_wins <- sort(percentage_wins, decreasing = TRUE)
champ_name = "Annie"
champ_data = train_data[champ_name]
champ_data
train_data
train_data[champ_name,]
train_data[,champ_name]
percentage_win_by_champ <- function(champ_name){
champ_data = train_data[,champ_name]
wins = length(champ_data[champ_data > 0])
losses = length(champ_data[champ_data < 0])
return(wins/(wins + losses))
}
all_champs <- colnames(train_data)
percentage_wins <- sapply(all_champs, percentage_win_by_champ)
percentage_wins <- sort(percentage_wins, decreasing = TRUE)
percentage_wins
?scale
train_data <- as.matrix(read.csv("C:/Users/faumac/Desktop/league AI/data/train_data_r.csv", header = TRUE, row.names = 1))
train_data.scaled = scale(train_data)
View(train_data.scaled)
View(train_data)
train_data.scaled = scale(train_data, center = FALSE)
train_data.pca <- prcomp(train_data.scaled,retx=TRUE,center=FALSE, scale=FALSE)
train_data.pca$rotation
#pca
train_data.pca <- prcomp(train_data.scaled,retx=TRUE,center=FALSE, scale=FALSE)
# Make Scree plot
screeplot(train_data.pca, npcs=400, type="lines",main="train data PCA Variance by Principal Component")
# Examine  summary by importance
View(summary(Fbar.pca)$importance)
#pca
train_data.pca <- prcomp(train_data.scaled,retx=TRUE,center=FALSE, scale=FALSE)
# Make Scree plot
screeplot(train_data.pca, npcs=139, type="lines",main="train data PCA Variance by Principal Component")
# Examine  summary by importance
View(summary(Fbar.pca)$importance)
#pca
train_data.pca <- prcomp(train_data,retx=TRUE,center=FALSE, scale=FALSE)
# Make Scree plot
screeplot(train_data.pca, npcs=139, type="lines",main="train data PCA Variance by Principal Component")
# Examine  summary by importance
View(summary(Fbar.pca)$importance)
#pca
train_data.pca <- prcomp(train_data,retx=TRUE,center=FALSE, scale=FALSE)
# Make Scree plot
screeplot(train_data.pca, npcs=139, type="lines",main="train data PCA Variance by Principal Component")
# Examine  summary by importance
View(summary(train_data.pca)$importance)
p <- ggbiplot(Fbar.pca,
choices=c(1,2),
alpha=.4,
varname.adjust=3,
var.axes = 0
)
library(readr)
library("ggbiplot")
library(readr)
library(ggbiplot)
install.packages("ggbiplot")
install.packages("devtools",dependencies = TRUE )  # also need install ggplot2
library("devtools")
install_git("git://github.com/vqv/ggbiplot.git",dependencies = TRUE)
library("ggbiplot")
library(readr)
library("ggbiplot")
p <- ggbiplot(Fbar.pca,
choices=c(1,2),
alpha=.4,
varname.adjust=3,
var.axes = 0
)
p <- ggbiplot(train_data.pca,
choices=c(1,2),
alpha=.4,
varname.adjust=3,
var.axes = 0
)
p <- ggbiplot(train_data.pca,
choices=c(1,2),
alpha=.4,
varname.adjust=3,
var.axes = 0
)
p + ggtitle('train data Biplot of PC1 and PC2') +  coord_cartesian(xlim=c(-2.5,2.5), ylim=c(-2.5,2.5))
train_data.pca$rotation
train_data.pca$rotation[1]
View(train_data.pca$rotation)
train_data.pca$rotation[,"PC1"]
sort(train_data.pca$rotation[,"PC1"], decreasing = TRUE)
sort(train_data.pca$rotation[,"PC2"], decreasing = TRUE)
install.packages("nsprcomp")
library(readr)
library("ggbiplot")
library("nsprcomp")
?nsprcomp
train_data.sparse_pca <- nsprcomp(train_data,retx=TRUE,center=FALSE, scale=FALSE)
train_data.sparse_pca <- nsprcomp(train_data,retx=TRUE,center=FALSE, scale.=FALSE, nneg = FALSE)
train_data.sparse_pca <- nsprcomp(train_data,retx=TRUE,center=FALSE, scale.=FALSE, nneg = FALSE, verbosity=3)
screeplot(train_data.sparse_pca, npcs=139, type="lines",main="train data sparse PCA Variance by Principal Component")
# Examine  summary by importance
View(summary(train_data.sparse_pca)$importance)
#pca
train_data.pca <- prcomp(train_data,retx=TRUE,center=FALSE, scale=FALSE)
# Make Scree plot
screeplot(train_data.pca, npcs=139, type="lines",main="train data PCA Variance by Principal Component")
# Examine  summary by importance
View(summary(train_data.pca)$importance)
train_data.scaled_sparse_pca <- nsprcomp(train_data.scaled,retx=TRUE,center=FALSE, scale.=FALSE, nneg = FALSE, verbosity=3)
rm(train_data.sparse_pca)
percentage_win_by_champ <- function(champ_name){
champ_data = train_data[,champ_name]
wins = length(champ_data[champ_data > 0])
losses = length(champ_data[champ_data < 0])
return(c(wins, losses, wins + losses, (wins/(wins + losses))))
}
all_champs <- colnames(train_data)
percentage_wins <- sapply(all_champs, percentage_win_by_champ)
#percentage_wins <- sort(percentage_wins, decreasing = TRUE)
View(percentage_wins)
all_champs <- colnames(train_data)
percentage_wins <- t(sapply(all_champs, percentage_win_by_champ))
#percentage_wins <- sort(percentage_wins, decreasing = TRUE)
rm(train_data.scaled)
library(readr)
library("ggbiplot")
library("gtools")
train_data <- as.matrix(read.csv("C:/Users/faumac/Desktop/league AI/data/train_data_r.csv", header = TRUE, row.names = 1))
train_data.scaled = scale(train_data, center = FALSE)
percentage_win_by_champ <- function(champ_name){
champ_data = train_data[,champ_name]
wins = length(champ_data[champ_data > 0])
losses = length(champ_data[champ_data < 0])
return(c(wins, losses, wins + losses, (wins/(wins + losses))))
}
win_vs <- function(champ_win, champ_lose){
champ_data = train_data[,c(champ_win,champ_lose)]
wins = length(champ_data[champ_data[,champ_win] > 0 & champ_data[,champ_lose] < 0])
losses = length(champ_data[champ_data[,champ_win] < 0 & champ_data[,champ_lose] > 0])
return(c(wins, losses, wins + losses, (wins/(wins + losses))))
}
win_with <- function(champ_win, champ_lose){
champ_data = train_data[,c(champ_win,champ_lose)]
wins = length(champ_data[champ_data[,champ_win] > 0 & champ_data[,champ_lose] > 0])
losses = length(champ_data[champ_data[,champ_win] < 0 & champ_data[,champ_lose] < 0])
return(c(wins, losses, wins + losses, (wins/(wins + losses))))
}
all_champs <- colnames(train_data)
percentage_wins <- t(sapply(all_champs, percentage_win_by_champ))
library(plyr)
?rbind.fill
rm(train_data.scaled)
all_wins_vs.list <- sapply(all_champs, function(champ){
ans <- sapply(all_champs, win_vs, champ_win=champ)
return(as.matrix(ans[,ans[3,]>=50])[4,])
})
ans <- do.call(rbind.fill, all_wins_vs.list[1:2])
ans <- rbind.fill(lapply(all_wins_vs.list[1:2],function(y){as.data.frame(t(y),stringsAsFactors=FALSE)}))
ans
all_wins_vs.matrix <- rbind.fill(lapply(all_wins_vs.list,function(y){as.data.frame(t(y),stringsAsFactors=FALSE)}))
View(all_wins_vs.matrix)
all_wins_with.list <- sapply(all_champs, function(champ){
ans <- sapply(all_champs, win_with, champ_win=champ)
return(as.matrix(ans[,ans[3,]>=50])[4,])
})
all_wins_with.matrix <- rbind.fill(lapply(all_wins_with.list,function(y){as.data.frame(t(y),stringsAsFactors=FALSE)}))
colnames(all_wins_vs.matrix) <- all_champs
rownames(all_wins_vs.matrix) <- all_champs
rownames(all_wins_with.matrix) <- all_champs
View(all_wins_with.matrix)
wins_with("Tristana","Sona")
win_with("Tristana","Sona")
win_with("Jax","Fizz")
win_with("Yasuo","Diana")
sort(all_wins_vs.list[["Yasuo"]], decreasing = FALSE)
sort(all_wins_with.list[["Yasuo"]], decreasing = FALSE)
sort(all_wins_with.list[["Yasuo"]], decreasing = True)
sort(all_wins_with.list[["Yasuo"]], decreasing = TRUE)
win_with("Bard","Yasuo")
win_with("Skarner","Yasuo")
win_vs("Vladimir","Yasuo")
sort(all_wins_vs.list[["Fiora"]], decreasing = FALSE)
sort(all_wins_with.list[["Fiora"]], decreasing = FALSE)
sort(all_wins_with.list[["Fiora"]], decreasing = TRUE)
win_with("Tristana","Fiora")
percentage_win_by_champ("Fiora")
win_with("Fiora","Trundle")
win_with("Fiora","Galio")
win_with("Fiora","Blitzcrank")
all_win_vs.list("Gangplank")
sort(all_wins_vs.list[["Gangplank"]], decreasing = FALSE)
win_vs("Gankgplank","Soraka")
win_vs("Gankgplank","Soraka")
win_vs("Reksai","Soraka")
win_vs("Reksai","Annie")
View(train_data)
train_data[,"Gangplank"]
train_data[,"Annie"]
train_data[,c("Gangplank","Annie")]
win_vs("Reksai","Annie")
win_with("Reksai","Annie")
champ_data = train_data[,c(champ_win,champ_lose)]
champ_win = "Annie"
champ_lose = "Soraka"
champ_data = train_data[,c(champ_win,champ_lose)]
wins = length(champ_data[champ_data[,champ_win] > 0 & champ_data[,champ_lose] < 0])
losses = length(champ_data[champ_data[,champ_win] < 0 & champ_data[,champ_lose] > 0])
c(wins, losses, wins + losses, (wins/(wins + losses)))
win_vs("Annie","Soraka")
win_vs("Gangplank","Soraka")
sort(all_wins_vs.list[["Gangplank"]], decreasing = FALSE)
sort(all_wins_with.list[["Gangplank"]], decreasing = TRUE)
win_with("Gangplank", "Draven")
win_with("Gangplank", "Evelynn")
win_vs("Malphite", "Zed")
win_vs("Mundo", "Zed")
win_vs("Drmundo", "Zed")
win_vs("DrMundo", "Zed")
sort(all_wins_with.list[["Mundo"]], decreasing = TRUE)
sort(all_wins_with.list[["Soraka"]], decreasing = TRUE)
with_with("Soraka","Skarner")
win_with("Soraka","Skarner")
percentage_win_by_champ("Skarner")
percentage_win_by_champ("Soraka")
percentage_win_by_champ("Sion")
sort(all_wins_with.list[["Sion"]], decreasing = TRUE)
win_with("Sion","Kalista")
sort(all_wins_vs.list[["Skarner"]], decreasing = TRUE)
with_vs("Skarner","Kled")
win_vs("Skarner","Kled")
win_vs("Skarner","Soraka")
percentage_win_by_champ("Zoe")
library(readr)
library("ggbiplot")
library("gtools")
library(plyr)
train_data <- as.matrix(read.csv("C:/Users/faumac/Desktop/league AI/data/train_data_r.csv", header = TRUE, row.names = 1))
train_data.scaled = scale(train_data, center = FALSE)
percentage_win_by_champ <- function(champ_name){
champ_data = train_data[,champ_name]
wins = length(champ_data[champ_data > 0])
losses = length(champ_data[champ_data < 0])
return(c(wins, losses, wins + losses, (wins/(wins + losses))))
}
win_vs <- function(champ_win, champ_lose){
champ_data = train_data[,c(champ_win,champ_lose)]
wins = length(champ_data[champ_data[,champ_win] > 0 & champ_data[,champ_lose] < 0])
losses = length(champ_data[champ_data[,champ_win] < 0 & champ_data[,champ_lose] > 0])
return(c(wins, losses, wins + losses, (wins/(wins + losses))))
}
win_with <- function(champ_win, champ_lose){
champ_data = train_data[,c(champ_win,champ_lose)]
wins = length(champ_data[champ_data[,champ_win] > 0 & champ_data[,champ_lose] > 0])
losses = length(champ_data[champ_data[,champ_win] < 0 & champ_data[,champ_lose] < 0])
return(c(wins, losses, wins + losses, (wins/(wins + losses))))
}
sort(all_wins_vs.list[["Janna"]], decreasing = FALSE)
percentage_win_by_champ("Amumu")
sort(all_wins_vs.list[["Amumu"]], decreasing = FALSE)
sort(all_wins_vs.list[["Janna"]], decreasing = FALSE)
sort(all_wins_vs.list[["Shaco"]], decreasing = FALSE)
sort(all_wins_vs.list[["Shaco"]], decreasing = TRUE)
sort(all_wins_vs.list[["Tristana"]], decreasing = TRUE)
win_vs("Tristana","Kalista")
win_vs("Tristana","Jhin")
win_vs("Tristana","Lucian")
win_vs("Tristana","Quinn")
win_vs("Tristana","Missfortune")
win_vs("Tristana","MissFortune")
win_vs("Tristana","Vayne")
win_vs("Tristana","Draven")
win_vs("Tristana","Kogmaw")
win_vs("Tristana","KogMaw")
win_vs("Tristana","Xayah")
win_vs("Tristana","Jinx")
win_vs("Tristana","Janna")
win_vs("Tristana","Nami")
win_vs("Tristana","Rakan")
win_vs("Tristana","Taric")
win_vs("Tristana","Lulu")
win_vs("Tristana","Zoe")
win_vs("Tristana","Veigar")
win_vs("Tristana","Annie")
win_vs("Tristana","Karma")
win_vs("Tristana","Lux")
win_with("Tristana","Janna")
win_with("Tristana","Nami")
win_with("Tristana","Blitzcrank")
win_with("Tristana","Lulu")
win_with("Tristana","Brand")
win_with("Tristana","Zoe")
win_with("Tristana","Veigar")
win_with("Tristana","Malphite")
win_with("Tristana","Xerath")
win_with("Tristana","Karma")
